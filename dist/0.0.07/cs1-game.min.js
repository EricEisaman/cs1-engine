!function(){"use strict";AFRAME.registerSystem("trail",{schema:{},init:function(){},trails:{haveTrails:[]},createTrail:function(t,e,i,r,s,a){r>e&&(r=e),t.userData.trails||(t.userData.trails=[]);const o={length:Math.round(e),width:i,resolution:Math.round(r),trailHistory:[],trailVertices:[],worldDirection:new THREE.Vector3};t.userData.trails.push(o);var l=new THREE.PlaneGeometry(1,e,1,r),n=new THREE.MeshBasicMaterial({color:s,side:THREE.DoubleSide,wireframe:!1,transparent:!0,opacity:.2});o.mesh=new THREE.Mesh(l,n),o.mesh.position.add(a),this.el.sceneEl.object3D.add(o.mesh),this.trails.haveTrails.push(t),o.mesh.frustumCulled=!1,o.trailHistory=[],o.trailVertices=[];for(var c=0;c<r+1;c++)o.trailVertices[c]=[];for(c=0;c<o.trailVertices.length;c++)o.trailVertices[c][0]=o.mesh.geometry.vertices[2*c],o.trailVertices[c][1]=o.mesh.geometry.vertices[2*c+1]},updateTrailHistory:function(t){t.userData.trails.forEach(e=>{t.getWorldDirection(e.worldDirection),e.trailHistory.push([t.position.x,t.position.y,t.position.z,e.worldDirection.x,e.worldDirection.z]),e.trailHistory.length>e.length&&e.trailHistory.shift()})},updateTrails:function(){for(let t=0;t<this.trails.haveTrails.length;t++){const e=this.trails.haveTrails[t];this.updateTrailHistory(e),e.userData.trails.forEach(t=>{for(var e=0;e<t.trailVertices.length;e++){var i=Math.round(t.trailHistory.length/t.resolution*e);i===t.trailHistory.length&&(i=t.trailHistory.length-1);var r=t.trailHistory[i],s=THREE.Math.mapLinear(e,0,t.trailVertices.length,0,1)*t.width/2;void 0!==r&&(t.trailVertices[e][0].x=r[0]-r[4]*s,t.trailVertices[e][0].y=r[1],t.trailVertices[e][0].z=r[2]+r[3]*s,t.trailVertices[e][1].x=r[0]+r[4]*s,t.trailVertices[e][1].y=r[1],t.trailVertices[e][1].z=r[2]-r[3]*s)}t.mesh.geometry.verticesNeedUpdate=!0})}},resetTrail:function(t){t.userData.trails.forEach(t=>{t.trailHistory=[]})},tick:function(t,e){this.updateTrails()}}),AFRAME.registerComponent("trail",{schema:{length:{default:80},width:{default:.8},resolution:{default:18},color:{default:"white"},offset:{type:"vec3"}},multiple:!0,init:function(){console.log("Creating a trail.  The value of this is: ",this),this.system.createTrail(this.el.object3D,this.data.length,this.data.width,this.data.resolution,this.data.color,this.data.offset)},reset:function(){this.system.reset(this.el.object3D)}});const t=document.createElement("gltf-instances");async function e(t,e,i,r){const s=await CS1.create("a-sphere");s.setAttribute("trail__red","color:red; offset:-1 0 0"),s.setAttribute("trail__white","color:white; length:120"),s.setAttribute("trail__blue","color:blue; offset:1 0 0"),s.setAttribute("color",t),s.setAttribute("radius",.5),s.setAttribute("circle-movement",`center:${e}; radius: 6;reverse:${i};speed:${r}`),CS1.scene.appendChild(s)}CS1.add(t),CS1.myPlayer.setAttribute("jump","speed:25"),CS1.create("a-jukebox").then(t=>{window.jukebox=t,t.setAttribute("position","0 3.1 -10"),t.setAttribute("scale","4 4 4"),CS1.scene.appendChild(t)}),CS1.registerComponent("circle-movement",{schema:{center:{type:"vec3"},speed:{default:1},radius:{default:20},reverse:{default:!1}},init:function(){this.dir=this.data.reverse?1:-1},tick:function(t,e){const i=this.data.center.x+this.data.radius*Math.cos(this.dir*t*this.data.speed/1e3),r=this.data.center.y,s=this.data.center.z+this.data.radius*Math.sin(this.dir*t*this.data.speed/1e3);this.el.object3D.position.set(i,r,s)}}),e("blue","0 6 -20",!1,1),e("red","-4 4 -15",!0,1.5),e("white","4 8 -25",!0,.6),CS1.game.addEnvironment(),CS1.game.start()}();
//# sourceMappingURL=cs1-game.min.js.map
